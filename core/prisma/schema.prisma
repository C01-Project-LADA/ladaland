generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VisaRequirement {
  id          Int    @id @default(autoincrement())
  passport    String
  destination String
  requirement String

  @@unique([passport, destination])
}

model User {
  id        String  @id @default(uuid())
  username  String  @unique
  email     String  @unique
  password  String
  phone     String?
  createdAt DateTime @default(now())
  visitedCountries String?
  points            Int      @default(0)
  posts     Post[]
  comments  Comment[]
  postVotes PostVote[]
}

model Post {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  country    String
  content    String
  images     Json?
  tags       String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pointsAwarded Int      @default(0)
  comments   Comment[]
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postVotes  PostVote[]

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, userId])
}

model PostVote {
  id      String  @id @default(uuid())
  userId  String
  postId  String
  type    VoteType
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
}

enum VoteType {
  LIKE
  DISLIKE
}