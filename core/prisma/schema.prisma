generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VisaRequirement {
  id          Int    @id @default(autoincrement())
  passport    String
  destination String
  requirement String

  @@unique([passport, destination])
}

model User {
  id        String  @id @default(uuid())
  username  String  @unique
  email     String  @unique
  password  String
  phone     String?
  createdAt DateTime @default(now())
  visitedCountries String?
  points            Int      @default(0)
  posts     Post[]
  comments  Comment[]
  postVotes PostVote[]
  commentVotes CommentVote[]
  trips Trip[]
}

model Post {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  country    String
  content    String
  imageUrl   String?
  tags       String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pointsAwarded Int      @default(0)
  comments   Comment[]
  postVotes  PostVote[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentVotes CommentVote[]

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, userId])
}

model PostVote {
  id      String  @id @default(uuid())
  userId  String
  postId  String
  type    VoteType
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model CommentVote {
  id        String  @id @default(uuid())
  userId    String
  commentId String
  type      VoteType
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

enum VoteType {
  LIKE
  DISLIKE
}

model Trip {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String
  location    String
  startDate   DateTime  @default(now())
  endDate     DateTime
  budget      Int
  completed   Boolean   @default(false)
  expenses    Expense[]
}

model Expense {
  id          String    @id @default(uuid())
  tripId      String
  trip        Trip      @relation(fields: [tripId], references: [id])
  type        String
  name        String
  cost        Int
}